generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId String @unique
  email String @unique
  firstname String? @unique
  lastname String? @unique
  createdAt DateTime @default(now())
  subscription Subscription?
  automations Automation[]
  integrations Integrations[]
}

model Subscription {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User User? @relation(fields: [userId], references: [id] , onDelete:  Cascade)
  userId String? @unique @db.Uuid 
}

model Automation {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @default("Untitled")
  createdAt DateTime @default(now())
  active Boolean @default(false)
  User User? @relation(fields: [userId], references: [id], onDelete:  Cascade)
  userId String? @db.Uuid
  trigger Trigger[]
  listener Listener?
  posts Post[]
  dms Dms[]
  keywords Keyword[]

}

model Integrations{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name INTEGRATIONS @default(INSTAGRAM)
  createdAt DateTime @default(now())
  User User? @relation(fields: [userId], references: [id], onDelete:  Cascade)
  userId String? @db.Uuid
  token String @unique
  expiresAt DateTime?
  instagramId String? @unique

}



model Trigger{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type String
  Automation Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String? @db.Uuid
}

model Keyword{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word String
  Automation Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String? @db.Uuid
  
}

model Listener{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String? @unique @db.Uuid
  listener LISTENERS @default(MESSAGE)
  prompt String
  commentReply String?
  dmCount Int @default(0)
  commentCount Int @default(0)

}



model Dms{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   Automation Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String? @db.Uuid
   createdAt DateTime @default(now())
   senderId String?
   reciever String?
   message String?
}


model Post{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId String
  caption String?
  media String
  mediaType MEDIATYPE @default(IMAGE)
  Automation Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
automationId String?  @db.Uuid
}


enum INTEGRATIONS{
  INSTAGRAM
}

enum LISTENERS{
  SMARTAI
  MESSAGE
}

enum MEDIATYPE{
  IMAGE
  VIDEO
  CAROCEL_ALBUM
}
enum SUBSCRIPTION_PLAN {
  PRO 
  FREE
}
